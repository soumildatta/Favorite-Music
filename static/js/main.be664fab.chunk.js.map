{"version":3,"sources":["components/img/heart.svg","components/img/emptyHeart.svg","components/img/search.svg","config/fbConfig.js","components/liker.jsx","components/search.jsx","components/songInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Liker","state","click","logo","heart","handleIncrement","setState","updateFirestoreLikes","props","likes","incOrDec","collection","doc","this","name","set","merge","emptyHeart","className","onClick","src","formatHeart","alt","data-testid","Component","Search","onChange","e","search","type","placeholder","SearchIcon","songInfo","event","keyword","target","value","songList","rows","i","length","push","key","songs","filter","data","artist","toLowerCase","includes","map","song","id","cover","href","link","rel","formatList","App","console","log","db","get","then","snapshot","forEach","catch","error","onSnapshot","docChanges","change","find","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be664fab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.32d5e34b.svg\";","module.exports = __webpack_public_path__ + \"static/media/emptyHeart.cd6a5112.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.f9719b88.svg\";","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDMbLY91aJKM9mnq2zMLhAsKy_-f8rVXRs\",\n  authDomain: \"favorite-music-678e1.firebaseapp.com\",\n  databaseURL: \"https://favorite-music-678e1.firebaseio.com\",\n  projectId: \"favorite-music-678e1\",\n  storageBucket: \"favorite-music-678e1.appspot.com\",\n  messagingSenderId: \"619773047361\",\n  appId: \"1:619773047361:web:17d158d44961a87a4b0cc0\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore();\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport firebase from \"../config/fbConfig\";\n\nimport \"./styles/liker.css\";\n\nimport heart from \"./img/heart.svg\";\nimport emptyHeart from \"./img/emptyHeart.svg\";\n\nclass Liker extends Component {\n  state = {\n    click: 0,\n    logo: heart,\n  };\n\n  handleIncrement = () => {\n    const { click } = this.state;\n\n    if (click < 1) {\n      this.setState({\n        click: click + 1,\n      });\n      this.updateFirestoreLikes(1, this.props.likes);\n    } else {\n      this.setState({\n        click: click - 1,\n      });\n      this.updateFirestoreLikes(0, this.props.likes);\n    }\n  };\n\n  updateFirestoreLikes(incOrDec, likes) {\n    // 1 = liked, 0 = unliked\n    if (incOrDec === 1) {\n      firebase\n        .firestore()\n        .collection(\"songs\")\n        .doc(this.props.name)\n        .set(\n          {\n            likes: likes + 1,\n          },\n          { merge: true }\n        );\n    } else {\n      firebase\n        .firestore()\n        .collection(\"songs\")\n        .doc(this.props.name)\n        .set(\n          {\n            likes: likes - 1,\n          },\n          { merge: true }\n        );\n    }\n  }\n\n  formatHeart() {\n    return this.state.click === 0 ? heart : emptyHeart;\n  }\n\n  render() {\n    return (\n      <div className=\"text-center liker-items\">\n        <img\n          className=\"like-button\"\n          onClick={this.handleIncrement}\n          src={this.formatHeart()}\n          alt=\"like button\"\n        />\n        <h6 data-testid=\"like-count\">{this.props.likes}</h6>\n      </div>\n    );\n  }\n}\n\nexport default Liker;\n","import React, { Component } from \"react\";\n\nimport \"./styles/search.css\";\nimport SearchIcon from \"./img/search.svg\";\n\nclass Search extends Component {\n  render() {\n    return (\n      <form className=\"form-inline d-flex justify-content-center md-form form-sm pb-5\">\n        <div className=\"searchbar\">\n          <input\n            onChange={(e) => this.props.search(e)}\n            className=\"search_input\"\n            type=\"text\"\n            name=\"\"\n            placeholder=\"Search song or artist\"\n          />\n          <div className=\"search_icon\">\n            <img src={SearchIcon} alt=\"Search icon\"></img>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./styles/songInfo.css\";\nimport Liker from \"./liker\";\nimport Search from \"./search\";\n\nclass songInfo extends Component {\n  state = {\n    search: null,\n  };\n\n  search = (event) => {\n    let keyword = event.target.value;\n    this.setState({ search: keyword });\n  };\n\n  formatList(songList) {\n    // return songList;\n    var rows = [];\n    for (var i = 0; i < songList.length; i += 2) {\n      if (i % 2 === 0) {\n        rows.push(\n          <div key=\"i\" className=\"card-deck\">\n            {songList[i]}\n            {songList[i + 1]}\n          </div>\n        );\n      }\n    }\n    return rows;\n  }\n\n  render() {\n    const { songs } = this.props;\n    const songList = songs\n      .filter((data) => {\n        if (this.state.search == null) return data;\n        else if (\n          data.artist.toLowerCase().includes(this.state.search.toLowerCase()) ||\n          data.name.toLowerCase().includes(this.state.search.toLowerCase())\n        ) {\n          return data;\n        }\n        // failed\n        return null;\n      })\n      .map((song) => {\n        return (\n          <div key={song.id} className=\"card\">\n            <div className=\"card-body\">\n              <div className=\"d-flex flex-row\">\n                <img src={song.cover} alt=\"abba art\" className=\"cover-art\" />\n                <div className=\"flex-grow-1 text-justify song-info\">\n                  <a href={song.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <h5 className=\"card-title\" data-testid=\"song-name\">\n                      {song.name}\n                    </h5>\n                  </a>\n                  <h6\n                    className=\"card-subtitle text-muted\"\n                    data-testid=\"song-artist\"\n                  >\n                    {song.artist}\n                  </h6>\n                </div>\n                <Liker likes={song.likes} name={song.name} />\n              </div>\n            </div>\n          </div>\n        );\n      });\n    return (\n      <div className=\"song-list\">\n        <Search search={this.search} />\n        {/* {songList} */}\n        {this.formatList(songList)}\n      </div>\n    );\n  }\n}\n\nexport default songInfo;\n","import React, { Component } from \"react\";\nimport firebase from \"./config/fbConfig\";\n\nimport SongInfo from \"./components/songInfo\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    // each object contains artist, cover, id, link, likes, name\n    songs: [],\n  };\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    const db = firebase.firestore();\n    db.collection(\"songs\")\n      .get()\n      .then((snapshot) => {\n        const songs = [];\n\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          songs.push(data);\n        });\n\n        this.setState({ songs: songs });\n      })\n      .catch((error) => console.log(error));\n\n    db.collection(\"songs\").onSnapshot((snapshot) => {\n      let changes = snapshot.docChanges();\n\n      changes.forEach((change) => {\n        if (change.type === \"modified\") {\n          var songs = this.state.songs;\n\n          const changed = songs.find((p) => {\n            if (p.id === change.doc.data().id) {\n              p.likes = change.doc.data().likes;\n              return true;\n            }\n            return false;\n          });\n\n          if (changed) {\n            this.setState({\n              songs: songs,\n            });\n          }\n        }\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>Soumil's Favorite Songs</h1>\n          <p>\n            This is a list of my current favorite songs. You can search through\n            my favorite songs using the search bar below. Leave a like on songs\n            to let me know you like them too! You can also see the total number\n            of people that have liked the song :)\n          </p>\n\n          <div className=\"song-cards\">\n            <SongInfo className=\"songs\" songs={this.state.songs} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}